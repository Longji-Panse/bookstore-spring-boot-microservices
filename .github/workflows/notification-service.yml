name: Notification Service

on:
  push:
    paths:
      - notification-service/**
    branches:
      - '**'

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 35432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3.12.11-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      working-directory: ./notification-service
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/bookstore-notification-service
      SPRING_PROFILES_ACTIVE: ci
      TESTCONTAINERS_ENABLED: false
      POSTGRES_URL: jdbc:postgresql://localhost:5432/testdb
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass

    defaults:
      run:
        working-directory: ${{ env.working-directory }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Build & Run Tests
        run: ./mvnw -ntp verify -Dspring.profiles.active=ci

      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - if: ${{ github.ref == 'refs/heads/main' }}
        name: Build and Publish Docker Image
        run: |
          ./mvnw spring-boot:build-image -DskipTests
          echo "Pushing the image $DOCKER_IMAGE_NAME to Docker Hub..."
          docker push $DOCKER_IMAGE_NAME
